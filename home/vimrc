"plugins
call plug#begin('~/.vim/plugins')
Plug 'aonemd/kuroi.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara'}
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'Raimondi/delimitMate'
Plug 'machakann/vim-sandwich'
Plug 'ntpeters/vim-better-whitespace'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'stephpy/vim-yaml'
Plug 'cespare/vim-toml'
Plug 'elzr/vim-json'
Plug 'plasticboy/vim-markdown'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'fatih/vim-go'
Plug 'vim-airline/vim-airline'
call plug#end()

" don't show intro message
set shortmess=aI

set nocompatible
filetype off
filetype plugin indent on

set noerrorbells                    " don't beep me bro
set number                          " display line numbers
set backspace=indent,eol,start      " this backspace is made for deleting,
                                    " and that's just what it'll do
                                    " and it'll deleting all over you

set showcmd                         " display incomplete commans
set showmode                        " display current mode
set laststatus=2                    " always show status line
set statusline=%=%m\ %l:%c\ %P\ %f  " [$modified] $line:$column $rel_pos $filename

set lazyredraw                      " lazy redraw while executing commands
set ttyfast                         " send more data to terminal for fast redrawing

" show list of possible matches when editing commands and exclude clutter when
" completing filenames
set wildmenu
set wildmode=list:full
set wildignore+=.hg,.git,.svn
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.jpeg,*.jpg,*.bmp,*.gif,*.png
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.class,*.so,*.a
set wildignore+=*.spl
set wildignore+=*.sw?
set wildignore+=*.DS_Store
set wildignore+=.pyc

set noswapfile                      " disable swap files
set nobackup                        " don't litter
set autoread                        " auto-reload external file changes
set autowrite                       " auto-save files when needed
set encoding=utf-8                  " enable funky characters
set fileencoding=utf-8
set hidden                          " hide buffers not closing them (allows to open new files without saving the current)
au FocusLost * :wa                  " auto-save when focus lost (GUI)

"set colorcolumn=79                 " show line width
"set textwidth=79
set nowrap                          " don't wrap lines

set cursorline                      " higlight current line
set nocursorcolumn
set ruler                           " show cursor position
syntax sync minlines=256            " sync syntax highlighting window (faster)
set synmaxcol=300
set re=0                            " use old regex engine (faster)

" don't highlight current line in unfocused windows
au VimEnter,WinEnter,BufWinEnter,FocusGained,CmdwinEnter * set cul
au WinLeave,FocusLost,CmdwinLeave * set nocul


"split at bottom or right side
set splitbelow
set splitright

"enable autoindent
set autoindent
set complete-=i                     " exclude filenames in auto-complete
set complete=.,w,b,u,t
set completeopt=longest,menuone
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

set showmatch                       " show matching brackets
set smarttab                        " smarter tab handling
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set shiftround                      " indent to next tabstop
set formatoptions-=cro              "disable auto comments on new lines

" don't expand tabs in makefiles
au FileType make set noexpandtab

set notimeout
set ttimeout
set ttimeoutlen=10

"set leader key to space
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"


"
" UI
"

"use 256 colors
set t_Co=256

"set colorscheme (https://github.com/aonemd/kuroi.vim)
set background=dark
colorscheme kuroi

set guifont=Consolas:h16
set guioptions-=LT

" if we have a mouse why not flaunt it
if has('mouse')
  set mouse=a
endif

" on linux we use ttymouse
let s:uname = system("echo -n \"$(uname)\"")
if !v:shell_error && s:uname == "Linux" && !has('nvim')
  set ttymouse=xterm
endif

syntax enable
if has('gui_running')
  set regexpengine=1
  syntax enable
endif

" diff current buffer with contents on disk
if !exists(":DiffSaved")
  command DiffSaved vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif


"
"
"

"save buffer
nnoremap <leader>w :w<cr>

"replace word
nnoremap <leader>* :%s/\<<c-r><c-w>\>//g<left><left>

"sudo carve-those-god-damn-bits-into-disk
cnoremap w!! %!sudo tee > /dev/null %

" move selection around
nnoremap <silent> <leader>k :m-2<cr>==
nnoremap <silent> <leader>j :m+<cr>==
xnoremap <silent> <leader>k :m-2<cr>gv=gv
xnoremap <silent> <leader>j :m'>+<cr>gv+gv

" keep selection after indent
vnoremap < <gv
vnoremap > >gv

" cycle through buffers
nnoremap <Tab> :bnext<cr>
nnoremap <S-Tab> :bprevious<cr>

" quickfix helpers
autocmd FileType qf wincmd J        " alway push quickfix window to the bottom
map <C-n> :cn<CR>                   " next error
map <C-m> :cp<CR>                   " previous error
nnoremap <leader>a :cclose<CR>      " close quickfix window

map <C-j> <C-W>j                    " switch to top window
map <C-k> <C-W>k                    " switch to bottom window
map <C-h> <C-W>h                    " switch to left window
map <C-l> <C-W>l                    " switch to right window

" toggle spell check
nnoremap <F6> :setlocal spell! spell?<CR>

" switch to directory of active buffer
autocmd BufEnter * silent! lcd %:p:h

"prune trailing whitespace on write
"autocmd! BufWritePre * :%s/\s\+$//e

" happens all the time and what happens than makes me sad
map q: :q

" smart quit
nnoremap <silent> <leader>q :Sayonara<CR>

"
" search
"

"enable incremental search
set incsearch

"enable search highlight
set hlsearch

"turn off search highligts
nmap <leader><space> :nohlsearch<cr>

"default case insensitive, switch to sensitive when first uppercase letter entered
set ignorecase
set smartcase

"fzf
nnoremap <leader>p :FZF<cr>
nnoremap <leader>o :Lines<cr>
nnoremap <leader>t :Tags<cr>
nnoremap <leader>r :Buffers<cr>

" jump to search matches and center screen
nnoremap n nzzzv
nnoremap N Nzzzv


"
" Ctags
"
set tags+=.git/tags
nnoremap <leader>ct :!ctags -Rf .git/tags --tag-relative --extra=+f --exclude={.git,build,dist,node_modules,pkg} --languages=-sql<cr><cr>


"
" Git
"

" Fugitive
nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gb :Gblame<CR>


" GitGutter
nnoremap <c-N> :GitGutterNextHunk<cr>
nnoremap <c-P> :GitGutterPrevHunk<cr>
nnoremap <c-U> :GitGutterUndoHunk<cr>

autocmd FileType gitcommit setlocal spell


"
" NERDTree
"

noremap <Leader>n :NERDTreeToggle<CR>
noremap <Leader>f :NERDTreeFind<CR>     " navigate to file of current buffer

let NERDTreeShowHidden=1
let NERDTreeIgnore=['\~$', '\.git$', '.DS_Store']

autocmd BufEnter * if (winnr('$') == 1 && exists('b:NERDTreeType') && b:NERDTreeType == 'primary') | q | endif


"
" JavaScript
"

let g:vim_json_syntax_conceal = 0
au BufNewFile,BufRead *.json,*.js,*.jsx,*.mjs setlocal expandtab ts=2 sw=2 sts=2


"
" C/C++
"

au BufNewFile,BufRead *.c,*.cpp,*.cc,*.h,*.hpp setlocal expandtab ts=4 sw=4 sts=4

"
" Go
"

" sometimes you end up on a machine that has not the latest & greatest version
" of vim
if has('nvim')
  let g:go_loaded_install = !has('nvim-0.4.0')
else
  let g:go_loaded_install = !has('patch-8.0.1453')
endif
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4

"
" Dockerfile
"

autocmd FileType dockerfile setlocal expandtab ts=4 sw=4 sts=4


"
" vim-better-whitespace
"

let blacklist = ['make', 'diff', 'gitcommit', 'unite', 'qf', 'help', 'markdown']
autocmd BufWritePre * if index(blacklist, &ft) < 0 | StripWhitespace

