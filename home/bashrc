
. ~/.zsh/lib/aliases.zsh

__prompt() {
    readonly GIT_HAS_CHANGES='*'
    readonly GIT_IS_AHEAD='⇡'
    readonly GIT_IS_BEHIND='⇣'

    readonly FG_PATH="\[$(tput setaf 4)\]"
    readonly FG_OK="\[$(tput setaf 2)\]"
    readonly FG_BAD="\[$(tput setaf 1)\]"
    readonly FG_GIT="\[$(tput setaf 15)\]"
    readonly RESET="\[$(tput rev)\]"

    __git_info() {
        [ -x "$(which git)" ] || return

        local branch="$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --always 2>/dev/null)"
        [ -n "$branch" ] || return # no branch found

        local marks
        [ -n "$(git status --porcelain)" ] && marks+="$GIT_HAS_CHANGES"

        local stat="$(git status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
        local ahead="$(echo $stat | grep -o 'ahead \d\+' | grep -o '\d\+')"
        local behind="$(echo $stat | grep -o 'behind \d\+' | grep -o '\d\+')"
        [ -n "$behind" ] && marks+=" $GIT_IS_BEHIND"
        [ -n "$ahead" ] && marks+=" $GIT_IS_AHEAD"

        printf " $branch$marks "
    }

    ps1() {
        if [ $? -eq 0 ]; then
            local FG_EXIT="$FG_OK"
        else
            local FG_EXIT="$FG_BAD"
        fi

        PS1="\n$FG_PATH\w $RESET"
        PS1+="$FG_GIT $(__git_info) $RESET"
        PS1+="\n$FG_EXIT$PS_SYMBOL $RESET"
    }

    PROMPT_COMMAND=ps1
}

__prompt
unset __prompt
